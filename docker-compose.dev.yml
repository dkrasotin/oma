version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: postgres-db
    environment:
      POSTGRES_DB: myapp
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d myapp"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Backend Service (NestJS)
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: nestjs-backend
    ports:
      - "3000:3000"
    environment:
      NODE_ENV: development
      DATABASE_URL: postgresql://postgres:postgres@postgres:5432/myapp
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - app-network
    volumes:
      - ./backend:/app
      - /app/node_modules
    command: npm run start:dev

  # Frontend Service (Angular) - Development Mode
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    container_name: angular-frontend
    ports:
      - "4200:4200"
    depends_on:
      - backend
    networks:
      - app-network
    volumes:
      - ./frontend:/app
      - /app/node_modules
    command: npm run start
    environment:
      - CHOKIDAR_USEPOLLING=true

volumes:
  postgres_data:

networks:
  app-network:
    driver: bridge 